<!DOCTYPE html>
<html>
  	<head>
    	<title><%= title %></title>
    	<!--<link rel='stylesheet' href='/css/style.css'/> -->
    	<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

		<style>
			body {
				color: #cccccc;
				font-family:Monospace;
				font-size:13px;
				text-align:center;

				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}

			a {

				color: #0080ff;
			}

		</style>

		<script src="js/jquery-2.1.0.js"></script>
		<script src="js/three.min.js"></script>

		<script src="js/Detector.js"></script>
		<script src="js/libs/stats.min.js"></script>
		<script src="js/nimbus.js"></script>
	</head>
	<body>

		<div id="container">
		<div id="info">
			<h1><%= title %></h1>
    		<p>Welcome to <%= title %></p><br>
		</div>
		</div>



		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;

			var camera, scene, renderer;

			var mesh;

			var target;
			var location_data;

			var request = {
							owner: "sevenbit",
						    target: "location/points",
						    action: "READ",
						    params: {
						    	originObj: "20140324",
						    	fields: ["time", "lat", "lon", "speed", "ele"],
						    	stats: ["max", "min"]
						    }
					  	  };

			$( document ).ready(function() {
				var val = nimbus.call(request, init);
			});

			function init(result) {

				container = document.getElementById( 'container' );

				location_data = result;
				var points = location_data.res.data.points[1].lat.length;
				console.log("Drawing: " + points + "points");

				loc_center = new THREE.Vector3(
											(location_data.res.data.stats[1].lon.max + location_data.res.data.stats[1].lon.min) / 2.0,
											(location_data.res.data.stats[1].lat.max + location_data.res.data.stats[1].lat.min) / 2.0,
											0
										);

				camera = new THREE.PerspectiveCamera( 5, window.innerWidth / window.innerHeight, 0.00000001, 400 );
				//camera.position.x = (location_data.res.data.stats[1].lon.max + location_data.res.data.stats[1].lon.min) / 2.0;
				//camera.position.y = (location_data.res.data.stats[1].lat.max + location_data.res.data.stats[1].lat.min) / 2.0;
				camera.position.x = loc_center.x;
				camera.position.y = loc_center.y;
				camera.position.z = 3;

				camera.up = new THREE.Vector3(0, 0, 1);

				target = new THREE.Vector3(camera.position.x, camera.position.y, 0);

				camera.lookAt(loc_center);

				scene = new THREE.Scene();

				var geometry = new THREE.BufferGeometry();
				var material = new THREE.LineBasicMaterial({ vertexColors: true });

				geometry.addAttribute( 'position', new Float32Array( points * 3 ), 3 );
				geometry.addAttribute( 'color', new Float32Array( points * 3 ), 3 );

				var positions = geometry.getAttribute( 'position' ).array;
				var colors = geometry.getAttribute( 'color' ).array;

				for(var i=0; i < points; i++){
					var x = location_data.res.data.points[1].lon[i];
					var y = location_data.res.data.points[1].lat[i];
					var z = 0;
					//var z = location_data.res.data.points[1].ele[i];

					//console.log(x+","+y+","+z);

					positions[ i * 3 ] = x;
					positions[ i * 3 + 1 ] = y;
					positions[ i * 3 + 2 ] = z;

					//var vel = location_data.res.data.points[1].speed[i] - location_data.res.data.stats[1].speed.min;
					//vel = vel / location_data.res.data.stats[1].speed.max;

					var speed = location_data.res.data.points[1].speed[i] / 10.0;

					speed = 1 - (Math.min(speed, 1.0) * 0.8);

					var col = (new THREE.Color).setHSL( speed, speed, 0.6 );

					colors[ i * 3 ] = col.r;
					colors[ i * 3 + 1 ] = col.g;
					colors[ i * 3 + 2 ] = col.b;

				}

				/*
				var r = 0.3;

				for ( var i = 0; i < points; i ++ ) {


					var x = (Math.random() * r - r / 2) + loc_center.x;
					var y = (Math.random() * r - r / 2) + loc_center.y;
					var z = 0;

					// positions

					positions[ i * 3 ] = x;
					positions[ i * 3 + 1 ] = y;
					positions[ i * 3 + 2 ] = z;

					// colors

					colors[ i * 3 ] = ( x / r ) + 0.5;
					colors[ i * 3 + 1 ] = ( y / r ) + 0.5;
					colors[ i * 3 + 2 ] = ( z / r ) + 0.5;

				}
				*/

				geometry.computeBoundingSphere();

				mesh = new THREE.Line( geometry, material );
				scene.add( mesh );



				renderer = new THREE.WebGLRenderer( { antialias: false } );
				renderer.setSize( window.innerWidth, window.innerHeight );

				renderer.gammaInput = true;
				renderer.gammaOutput = true;

				container.appendChild( renderer.domElement );

				//

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

				render();
				stats.update();
				setTimeout(animate);

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				render();
				stats.update();
			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				var time = Date.now() * 0.001;

				camera.rotation.z = time * 0.25;

				//mesh.rotation.z = time * 0.25;
				//mesh.rotation.y = time * 0.5;

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
