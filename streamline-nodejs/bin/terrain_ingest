#!/usr/bin/env node
var debug = require('debug')('my-application');
var Hoek = require('hoek');
var Async = require('async');
var fs = require('fs');
var colors = require('colors');
var TerrainRenderer = require('../lib/terrain_renderer.js');

var renderTile = function(datasource, renderer, infoList){
  /*
  for(infoIdx in infoList){
    info = infoList[infoIdx];

    console.log(info);

    var dataQuery = model.TileInfo.find(
      {origin: info.origin, lowerleft: info.lowerleft, sizeLL: info.sizeLL});
    var promise = dataQuery.exec();
    return promise.then(
      function(dataList){
        //renderer.drawTile(info, dataList[i]);
        console.log('Found tile data: ' + dataList.length);
      }
    );
  }*/
}

//try{

  var path = (process.argv.length > 2) ? process.argv[2] : undefined;

  console.log(path)

  var TerrainParser = require('../routes/nimbus/parsers/terrain_arcascii_crawler');
  var dataSource = new TerrainParser.TerrainDataSource({path: path});
  var render = undefined;


  dataSource.on('skip', function(info){
    console.log(info.path + ' crawled'.green + ' @ ' + info.date);
  });

  dataSource.on('parsing', function(path){
    console.log('parsing:'.yellow + path);
  });


  dataSource.on('parsed', function(info){
    console.log('parsed:'.green + info.path);
  });

  dataSource.on('files', function(files){
    console.log('File queue:');
    console.log(files);
  });


  dataSource.on('ready', function(){
    console.log('ready');
    var model = dataSource.getModel();

    render = new TerrainRenderer(dataSource);
    dataSource.crawl();

    var query = model.TileInfo.find({});
    var promise = query.exec();
    promise.then(
      function(infoList){
        console.log('Rendering ' + infoList.length + ' tiles');


        var count=0;

        Async.each(infoList,
          function(info, cb) {

            info = Hoek.clone(info);

            var dataQuery = model.TileData.find(
              { origin: info.origin,
                'lowerleft.x': info.lowerleft.x,
                'lowerleft.y': info.lowerleft.y}).limit(1);

            var dataPromise = dataQuery.exec();
            dataPromise.then(
              //function(thatInfo){
                function(dataList){
                  //console.log('Found tile data: ' + dataList.length);


                  console.log('Drawing tile: ' + count++ + '/' + infoList.length);

                  return render.drawTile({info: info, data: dataList[0], scale: 0.125}, cb)

                  /*Async.eachSeries(
                    [
                      {info: info, data: dataList[0], scale: 1.0},
                      {info: info, data: dataList[0], scale: 0.75},
                      {info: info, data: dataList[0], scale: 0.5},
                      {info: info, data: dataList[0], scale: 0.25},
                      {info: info, data: dataList[0], scale: 0.125},
                    ],
                    render.drawTile.bind(render),
                    function(err){

                      console.log(err);
                      console.log('Rendered tile ' + ++rendered + '/' + infoList.length);
                      cb();
                    }
                  );*/

                }
              //}(info)
            )
          }
        );
/*
        var rendered = 0;
        for(infoIdx in infoList){
          info = infoList[infoIdx];

          var dataQuery = model.TileData.find(
            { origin: info.origin,
              'lowerleft.x': info.lowerleft.x,
              'lowerleft.y': info.lowerleft.y}).limit(1);

          var dataPromise = dataQuery.exec();
          dataPromise.then(
            function(thatInfo){

              return function(dataList){
                //console.log('Found tile data: ' + dataList.length);
                render.drawTile(thatInfo, dataList[0],1.0);
                render.drawTile(thatInfo, dataList[0],0.75);
                render.drawTile(thatInfo, dataList[0],0.5);
                render.drawTile(thatInfo, dataList[0],0.25);
                render.drawTile(thatInfo, dataList[0],0.125);
                console.log('Rendered tile ' + ++rendered + '/' + infoList.length);
              };
            }(info)
          );
        }
        */
      }
    );

  });

  dataSource.tiler.on('tiling', function(path){
    console.log('tiling:'.yellow + path);
  });

/*
}
catch(msg){
  console.log(msg);
  var stack = new Error().stack
  console.log( stack );
}
*/
